<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Advanced Hexo Setup Tips, 2024 Edition</title>
      <link href="/en/2024/03/06/2_2024-03-06-HexoSetup/"/>
      <url>/en/2024/03/06/2_2024-03-06-HexoSetup/</url>
      
        <content type="html"><![CDATA[<p>In the previous article, we built a very basic website. This time, let’s take a look at some personal configurations I plan to make in 2024.</p><p>In fact, the <a href="https://github.com/blinkfox/hexo-theme-matery">original documentation</a> and blogger <a href="https://marmalade.vip/about">lijunliang</a>‘s articles have already provided very detailed instructions, which are likely clearer and easier to understand than what an outsider like me could write.</p><p>However, these articles might be a bit dated, and some additional configurations may be necessary in 2024. This article will briefly introduce the changes I’ve made.</p><h2 id="1-Code-Block-Highlighting"><a href="#1-Code-Block-Highlighting" class="headerlink" title="1. Code Block Highlighting"></a>1. Code Block Highlighting</h2><p>In the original documentation regarding highlighting code blocks, it states:</p><blockquote><p>Starting from <strong>Hexo 5.0.0 version</strong>, it comes with support for <code>prismjs</code> code syntax highlighting, and hexo-theme-matery has been modified to support it.</p><p>If the plugin of <code>hexo-prism-plugin</code> has been installed in your blog, then you need to execute <code>npm uninstall hexo-prism-plugin</code> to uninstall it, otherwise there will be <code>&#123;</code>, <code>&#125;</code> escape characters in the code block of the post.</p><p>Then, modify the value of <code>highlight.enable</code> to <code>false</code> in <code>_config.yml</code> at the root your hexo project, and set the value of <code>prismjs.enable</code> to <code>true</code>, the main configuration is as follows:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">></span>highlight<span class="token punctuation">:</span> <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span> <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">></span>prismjs<span class="token punctuation">:</span> <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>However, the actual situation is that, by 2024, Hexo has reached version 7+ (check the version with <code>hexo -v</code> in cmd). In the official documentation, a new <code>syntax_highlighter: highlight.js</code> configuration has been added, so based on this, you need to change the highlight section in the root directory’s _config.yml file to:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">syntax_highlighter</span><span class="token punctuation">:</span> prismjs <span class="token comment">#declare prismjs</span><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The before and after effects are as follows:</p><p><img src="/en/../images/2/1_highlightcompare.png"></p><p><img src="/en/../images/2/1_highlightcompareafter.png"></p><h2 id="2-Code-Compression"><a href="#2-Code-Compression" class="headerlink" title="2. Code Compression"></a>2. Code Compression</h2><p>In <a href="https://marmalade.vip/Materysettings2.html">this article</a>, the author uses Gulp to compress code and images to speed up the website. However, since 2022, some commonJS packages have moved entirely to ESM. For example, <code>del</code> v7.0.0 in the original commonJS no longer supports commonJS and ESM simultaneously but supports ESM only, as stated in the <a href="https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c">original text</a>:</p><blockquote><p>The package that linked you here is now pure <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">ESM</a>. It cannot be <code>require()</code>‘d from CommonJS.</p></blockquote><p>For these ESM packages, you need to use import() instead of require().</p><p>Therefore, a few additional steps are needed based on the original tutorial:</p><h3 id="2-1-Installing-esm"><a href="#2-1-Installing-esm" class="headerlink" title="2.1, Installing esm"></a>2.1, Installing esm</h3> <pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">npm install gulp -g # Install gulp# Install functional modules npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save # Additional functional modules npm install gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del --savenpm i --save-dev esm -g # New, install esm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>And rename the file <code>gulpfile.js</code> to <code>gulpfile.mjs</code></p><h3 id="2-2-Changing-require-to-import"><a href="#2-2-Changing-require-to-import" class="headerlink" title="2.2, Changing require() to import()"></a>2.2, Changing require() to import()</h3><p>At the beginning of gulpfile.js, change all instances of require to <code>import xxx from &#39;gulp-xxx&#39;</code></p><p>Before change</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">></span><span class="token keyword">var</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">></span><span class="token keyword">var</span> debug <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-debug"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">></span><span class="token keyword">var</span> cleancss <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-clean-css"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// CSS compression component </span><span class="token operator">></span><span class="token keyword">var</span> uglify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-uglify"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// JS compression component </span><span class="token operator">></span><span class="token keyword">var</span> htmlmin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-htmlmin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// HTML compression component </span><span class="token operator">></span><span class="token keyword">var</span> htmlclean <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-htmlclean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// HTML cleaning component </span><span class="token operator">></span><span class="token keyword">var</span> imagemin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-imagemin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Image compression component </span><span class="token operator">></span><span class="token keyword">var</span> changed <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-changed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// File change verification component </span><span class="token operator">></span><span class="token keyword">var</span> gulpif <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-if"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Task helper calling component </span><span class="token operator">></span><span class="token keyword">var</span> plumber <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-plumber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Fault tolerance component (continue task on error and report error content) </span><span class="token operator">></span><span class="token keyword">var</span> isScriptAll <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// Whether to process all files, (true|process all files)(false|only process changed files) </span><span class="token operator">></span><span class="token keyword">var</span> isDebug <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// Whether to debug display compiled files </span><span class="token operator">></span><span class="token keyword">var</span> gulpBabel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-babel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">></span><span class="token keyword">var</span> es2015Preset <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"babel-preset-es2015"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">></span><span class="token keyword">var</span> del <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"del"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">></span><span class="token keyword">var</span> Hexo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"hexo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span>Source<span class="token operator">:</span> Marmalade's Blog<span class="token operator">></span>Author<span class="token operator">:</span> lijunliang<span class="token operator">></span>Article link<span class="token operator">:</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>marmalade<span class="token punctuation">.</span>vip<span class="token operator">/</span>Materysettings2<span class="token punctuation">.</span>html<span class="token operator">></span>This article is copyrighted by the author<span class="token punctuation">,</span> any form <span class="token keyword">of</span> reprinting should cite the source<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>After change</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs">import gulp from 'gulp';import debug from 'gulp-debug';import cleancss from 'gulp-clean-css';import uglify from 'gulp-uglify';import htmlmin from 'gulp-htmlmin';import htmlclean from 'gulp-htmlclean';import imagemin from 'gulp-imagemin';import changed from 'gulp-changed';import gulpif from 'gulp-if';import plumber from 'gulp-plumber';import gulpBabel from 'gulp-babel';import es2015Preset from 'babel-preset-es2015';import &#123; deleteAsync &#125; from 'del';import Hexo from 'hexo';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Keep the rest unchanged.</p><h3 id="2-3-Starting-Gulp-Compression-Before-Deployment"><a href="#2-3-Starting-Gulp-Compression-Before-Deployment" class="headerlink" title="2.3, Starting Gulp Compression Before Deployment"></a>2.3, Starting Gulp Compression Before Deployment</h3><p>The original steps for deploying the webpage to GitHub were:</p><blockquote><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p>Now it is:</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hexo cleanhexo ggulp # Start Gulp compression, console can check for errorshexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Bilingual-Personal-Website"><a href="#3-Bilingual-Personal-Website" class="headerlink" title="3. Bilingual Personal Website"></a>3. Bilingual Personal Website</h2><p>This requirement has not yet found a universal solution. Hexo provides a solution called <a href="https://hexo.io/docs/internationalization.html">Internationalization (i18n)</a>, which essentially involves creating separate folders for two languages in the source file and then placing articles in the corresponding folders. However, in practice, especially when applying a preset theme, various difficulties may arise. Some themes, such as <a href="https://github.com/next-theme/hexo-theme-next">NexT</a>, have already adapted the feature for language switching. Unfortunately, the <a href="https://github.com/blinkfox/hexo-theme-matery">matery</a> theme used in this article does not seem to have this feature. Of course, experts can achieve this function by modifying the code. But is there a simpler way?</p><h3 id="3-1-Preliminary-Idea"><a href="#3-1-Preliminary-Idea" class="headerlink" title="3.1, Preliminary Idea"></a>3.1, Preliminary Idea</h3><p>Of course, there is. Essentially, what we want is a <strong>set</strong> of different interfaces, so it can be understood that the main interface is in Chinese, and then by adding a suffix like <code>/en</code> to the URL, it jumps to the English interface.</p><p>In other words, we can directly create two repositories to implement the mutual jump between the two URLs.</p><p>Fortunately, in GitHub’s personal URLs, although an account can only have one free user page, there can be many project pages.</p><blockquote><p>For example, <a href="https://zcpisme.github.io/">https://zcpisme.github.io/</a> is my user page, and if I have a project called myProject, the URL of this project would be <a href="https://zcpisme.github.io/myProject">https://zcpisme.github.io/myProject</a></p></blockquote><h3 id="3-2-The-Second-Repository"><a href="#3-2-The-Second-Repository" class="headerlink" title="3.2, The Second Repository"></a>3.2, The Second Repository</h3><p>This is simple. We copy the project folder of the Chinese website, rename it (arbitrarily named, but for convenience, I will call it myFirstBlog.en).</p><p>Create a new repository on GitHub, named en. The result is as follows:</p><p><img src="/en/../images/2/2_enGit.png"></p><h3 id="3-3-1-Modify-the-Configuration-Files-in-the-myFirstBlog-en-Folder"><a href="#3-3-1-Modify-the-Configuration-Files-in-the-myFirstBlog-en-Folder" class="headerlink" title="3.3.1, Modify the Configuration Files in the myFirstBlog.en Folder"></a>3.3.1, Modify the Configuration Files in the myFirstBlog.en Folder</h3><p>In the root directory’s _config.yml:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Site</span><span class="token key atrule">title</span><span class="token punctuation">:</span> Hexo<span class="token key atrule">subtitle</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token key atrule">language</span><span class="token punctuation">:</span> en <span class="token comment"># Change to en</span><span class="token comment"># URL</span><span class="token comment">## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'</span><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//zcpisme.github.io/en/  <span class="token comment"># Add en to the original basis</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Deployment</span><span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/zcpisme/en.git <span class="token comment"># Repository address for the en webpage</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> gh<span class="token punctuation">-</span>pages <span class="token comment"># Push to gh-pages</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In the theme’s _config.yml, add a button hyperlink to the Chinese page:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle  <span class="token comment"># add a Chinese button</span>  <span class="token key atrule">Chinese</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//zcpisme.github.io/  <span class="token comment"># Directly jump to the Chinese site</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>language<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-2-Modify-the-Configuration-Files-in-the-myFirstBlog-Folder"><a href="#3-3-2-Modify-the-Configuration-Files-in-the-myFirstBlog-Folder" class="headerlink" title="3.3.2, Modify the Configuration Files in the myFirstBlog Folder"></a>3.3.2, Modify the Configuration Files in the myFirstBlog Folder</h3><p>In the root directory’s _config.yml:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Site</span><span class="token key atrule">title</span><span class="token punctuation">:</span> Hexo<span class="token key atrule">subtitle</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN <span class="token comment"># Change to Chinese</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Similarly, we just need to add a button to the English site in the theme’s _config.yml:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle  <span class="token comment"># add an English button</span>  <span class="token key atrule">English</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /en  <span class="token comment"># Can fully write https://zcpisme.github.io/en</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>language<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-Effect"><a href="#3-4-Effect" class="headerlink" title="3.4, Effect"></a>3.4, Effect</h3><p>After uploading to the two repositories and waiting a moment, you can check the URLs, the effect is as follows:</p><p>Chinese site:</p><p><img src="/en/../images/2/3_ch.png"></p><p>English site:</p><p><img src="/en/../images/2/3_en.png"></p><h3 id="3-5-Disadvantages"><a href="#3-5-Disadvantages" class="headerlink" title="3.5, Disadvantages"></a>3.5, Disadvantages</h3><p>The disadvantages are obvious:</p><ul><li><p>Two repositories need to be maintained separately, which is too troublesome.</p></li><li><p>Article content needs to be prepared separately because this only translates the main interface, the content of the articles still needs to be translated and uploaded individually.</p></li><li><p>Some code still needs to be modified to adapt to the English page. For example, <img src="/en/../images/2/3_enflaw.png" alt="some parts are not in English"></p></li><li><p>……</p></li></ul><h2 id="4-A-Brief-Summary"><a href="#4-A-Brief-Summary" class="headerlink" title="4, A Brief Summary"></a>4, A Brief Summary</h2><p>Here, I’ve dealt with some outdated tutorials from the original document and briefly mentioned some of my personal ideas about language switching. If there is a better way, please let me know! I’m eager to learn.</p>]]></content>
      
      
      <categories>
          
          <category> Personal Website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Github Personal Website Creation</title>
      <link href="/en/2024/03/04/1_2024-03-03-Hexo%20+%20Github%20Personal%20Website%20Creation/"/>
      <url>/en/2024/03/04/1_2024-03-03-Hexo%20+%20Github%20Personal%20Website%20Creation/</url>
      
        <content type="html"><![CDATA[<hr><p>As the first post, let’s talk about how this website was made. I’ve wanted to create a personal website for a long time, but I gave up on the idea due to not knowing too much about it. Otherwise, I would have to start learning some strange JavaScript and CSS related stuff from scratch, which would be too torturous for me. However, while chatting yesterday, a friend mentioned, “Don’t you guys have something like a personal portfolio?” I realized I didn’t, but then I suddenly thought about personal websites again. Remembering that professors during my undergraduate days had their own websites, I searched for content related to “personal website creation” again. Surprisingly, there were ready-to-use libraries available, like Hexo, even equipped with various themes. Times have changed, and now everything has become so easy, everything can be generated with one click.</p><p>Thank you, open-source hero.</p><h2 id="First-Step-Configuring-Github"><a href="#First-Step-Configuring-Github" class="headerlink" title="First Step: Configuring Github"></a>First Step: Configuring Github</h2><p>The reason for using Github is simple; for individual users, it provides a free user page, which can perfectly serve as a personal webpage.</p><h3 id="Registering-on-Github"><a href="#Registering-on-Github" class="headerlink" title="Registering on Github"></a>Registering on Github</h3><p>This step is omitted，many tutorial can be found online.</p><h3 id="Generating-id-rsa-and-id-rsa-pub-locally"><a href="#Generating-id-rsa-and-id-rsa-pub-locally" class="headerlink" title="Generating id_rsa and id_rsa.pub locally"></a>Generating id_rsa and id_rsa.pub locally</h3><p>Open a CMD terminal (or Windows PowerShell is recommended), and enter the following commands in sequence</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">git config --global user.name &quot;Github username&quot;git config --global user.email &quot;Github email address&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">ssh-keygen -t rsa -C &quot;Github email address&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>For example, if my GitHub username is <strong>zcpisme</strong>, using <strong><a href="mailto:&#122;&#x63;&#x70;&#x69;&#x73;&#109;&#101;&#x40;&#x75;&#x63;&#104;&#x69;&#99;&#x61;&#103;&#x6f;&#x2e;&#x65;&#100;&#117;">&#122;&#x63;&#x70;&#x69;&#x73;&#109;&#101;&#x40;&#x75;&#x63;&#104;&#x69;&#99;&#x61;&#103;&#x6f;&#x2e;&#x65;&#100;&#117;</a></strong> (an email I made up), then you would enter in the CMD:</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">git config --global user.name &quot;zcpisme&quot;git config --global user.email &quot;zcpisme@uchicago.edu&quot;ssh-keygen -t rsa -C &quot; zcpisme@uchicago.edu&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Press Enter, and if prompted with y&#x2F;n, type y and press Enter again</p><p>The result is as shown in the image</p><p><img src="/en/../images/1/1_rsakey.png"></p><p>Open the generated id_rsa.pub with Notepad and copy its contents (located on my computer at C:\Users\12427.ssh)</p><p><img src="/en/../images/1/1_rsakey2.png"></p><h3 id="Linking-Github-Account"><a href="#Linking-Github-Account" class="headerlink" title="Linking Github Account"></a>Linking Github Account</h3><p><img src="/en/../images/1/1_gitrsa.png"></p><p>Navigate to your GitHub account —&gt; Settings —&gt; SSH and GPG keys — new SSH key</p><p><img src="/en/../images/1/1_gitrsa2.png"></p><p><img src="/en/../images/1/1_gitrsa3.png"></p><p>For the title, you can choose any name (your email is recommended), and paste the content from the id_rsa.pub you copied earlier into the key section.</p><p>With this, the connection to Github is complete.</p><h3 id="Create-a-Repository-Named-username-github-io"><a href="#Create-a-Repository-Named-username-github-io" class="headerlink" title="Create a Repository Named username.github.io"></a>Create a Repository Named username.github.io</h3><p>At the top right corner, click on the plus sign and select New repository</p><p><img src="/en/../images/1/1_gitio.png"></p><p>For the repository name, enter “yourusername.github.io” <strong>!!! Important: It must be your username followed by .github.io, and each person can only have one such repository, which must be set to public</strong>, then click create repository at the bottom</p><p><img src="/en/../images/1/1_gitio2.png"></p><p>With this, the GitHub setup is complete.</p><h2 id="Step-1-5-Having-Node-js"><a href="#Step-1-5-Having-Node-js" class="headerlink" title="Step 1.5: Having Node.js"></a>Step 1.5: Having Node.js</h2><p>Some might complain, “Ah, zcp, why are you being so verbose?” I say, hold on, my goal is to provide step-by-step instructions, and I also fear that I might forget how to start from scratch and organize tutorials from the web later, so being verbose is better. But for this part, it’s just to inform everyone that it exists and won’t be elaborated on here.</p><p>Node.js is a JavaScript runtime environment, and our subsequent configurations will rely on it.</p><p>For installation tutorials, refer to:</p><p><a href="https://nodejs.org/en">https://nodejs.org/en</a></p><p><a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">https://www.runoob.com/nodejs/nodejs-install-setup.html</a></p><p>Basically, just download and install the MSI image file.</p><p>After installation, you can check if it was successful by entering in cmd:</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">npm -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/en/../images/1/1_nodejs.png"></p><h2 id="Step-2-Your-First-Hexo-Personal-Webpage"><a href="#Step-2-Your-First-Hexo-Personal-Webpage" class="headerlink" title="Step 2: Your First Hexo Personal Webpage"></a>Step 2: Your First Hexo Personal Webpage</h2><p>Here we go! With the above configurations, everything that follows becomes foolproof. You neither have to hand-code the webpage yourself nor need any programming knowledge.</p><p>After the previous step, we can use <strong>npm</strong> to manage packages in node.js.</p><h3 id="Installing-Hexo"><a href="#Installing-Hexo" class="headerlink" title="Installing Hexo"></a>Installing Hexo</h3><p>Enter the following command:</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">npm install hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Initializing-Hexo"><a href="#Initializing-Hexo" class="headerlink" title="Initializing Hexo"></a>Initializing Hexo</h3><p>For example, if I want to create a folder called myFirstBlog in D:\desktop\campus\personalBlog to manage my webpage, enter this folder in cmd:</p><p><img src="/en/../images/1/1_enterfolder.png"></p><p>Enter:</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hexo init myFirstBlog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>As you can see, myFirstBlog has been created.</p><p><img src="/en/../images/1/1_enterfolder2.png"></p><h3 id="Launching-Your-Personal-Website"><a href="#Launching-Your-Personal-Website" class="headerlink" title="Launching Your Personal Website"></a>Launching Your Personal Website</h3><p>Start the server in the folder you just created:</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hexo -s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/en/../images/1/1_starthexo.png"></p><p>You can also specify a port with hexo -s -p 4001 for debugging multiple sites (the default port is 4000).</p><p>Copy <a href="http://localhost:4000/">http://localhost:4000/</a> into your browser, and you can (locally) preview your site.</p><p><strong>Congratulations! You now have your own website!</strong><img src="/en/../images/1/1_starthexo2.png"></p><h2 id="Step-3-Hold-on-a-Moment-Publishing-to-Github"><a href="#Step-3-Hold-on-a-Moment-Publishing-to-Github" class="headerlink" title="Step 3: Hold on a Moment (Publishing to Github)"></a>Step 3: Hold on a Moment (Publishing to Github)</h2><p>Of course, we can’t limit ourselves to local previews. We need to publish our webpage to the public internet so that everyone can view it. To do this, follow the configuration steps below.</p><h3 id="Configuring-the-config-yml-File"><a href="#Configuring-the-config-yml-File" class="headerlink" title="Configuring the _config.yml File"></a>Configuring the _config.yml File</h3><p>In the myFirstBlog folder created earlier, there is a file named _config.yml. Open this file with Notepad. Scroll to the very bottom to the #Deployment section, set type to git, repo to the URL of your initial repository followed by .git, and branch to master. For example:</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"># Deployment## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;one-command-deploymentdeploy:  type: git  repo: https:&#x2F;&#x2F;github.com&#x2F;zcpisme&#x2F;zcpisme.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Publishing"><a href="#Publishing" class="headerlink" title="Publishing"></a>Publishing</h3><p>The last step, in the cmd (still inside the myFirstBlog folder), enter</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Wait for the files to upload to GitHub. After a few minutes, username.github.io will be your personal webpage!</p><p><img src="/en/../images/1/1_gitiofinal.png"></p><p>Isn’t it as easy as ABC~</p><h3 id="Common-Hexo-Commands"><a href="#Common-Hexo-Commands" class="headerlink" title="Common Hexo Commands"></a>Common Hexo Commands</h3><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hexo init [folder] # Initialize hexohexo new [layout] &lt;title&gt; # Create a new post, all posts need to be in markdown (.md) format, by default located in .&#x2F;source&#x2F;_post folderhexo generate # Generate static files, same as hexo ghexo server # Start local server, same as hexo shexo deploy # Deploy website, same as hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>In personal use, changing and deploying repeatedly, entering commands one by one can be cumbersome (and you might even miss a step). So, you can create a sh script, and run it each time.</p><p>For example, inside the myFirstBlog folder, create a new Notepad document, enter</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># Stop script on any error</span><span class="token builtin class-name">set</span> <span class="token parameter variable">-e</span><span class="token comment"># Navigate to the Hexo project directory (if not already there)</span><span class="token comment"># Clean the public directory</span><span class="token builtin class-name">echo</span> <span class="token string">"Cleaning..."</span>hexo clean<span class="token comment"># Generate static files</span><span class="token builtin class-name">echo</span> <span class="token string">"Generating..."</span>hexo generate<span class="token comment"># Deploy to the server</span><span class="token builtin class-name">echo</span> <span class="token string">"Deploying..."</span>hexo deploy<span class="token builtin class-name">echo</span> <span class="token string">"Deployment successful!"</span><span class="token builtin class-name">echo</span> <span class="token string">"Press enter to close"</span><span class="token builtin class-name">read</span> <span class="token parameter variable">-r</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Rename the file to deploy.sh, before deploying enter</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;deploy.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Step-Wait-a-Bit-Longer-Optional"><a href="#Step-Wait-a-Bit-Longer-Optional" class="headerlink" title="Step ?: Wait a Bit Longer (Optional)"></a>Step ?: Wait a Bit Longer (Optional)</h2><h3 id="Publishing-1"><a href="#Publishing-1" class="headerlink" title="Publishing"></a>Publishing</h3><p>The last step, in the cmd (still inside the myFirstBlog folder), enter</p><pre class="line-numbers language-none"><code class="language-none">Copy codehexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Wait for the files to upload to GitHub. After a few minutes, username.github.io will be your personal webpage!</p><p>Isn’t it as easy as ABC~</p><h3 id="Common-Hexo-Commands-1"><a href="#Common-Hexo-Commands-1" class="headerlink" title="Common Hexo Commands"></a>Common Hexo Commands</h3><pre class="line-numbers language-none"><code class="language-none">phpCopy codehexo init [folder] # Initialize hexohexo new [layout] &lt;title&gt; # Create a new post, all posts need to be in markdown (.md) format, by default located in .&#x2F;source&#x2F;_post folderhexo generate # Generate static files, same as hexo ghexo server # Start local server, same as hexo shexo deploy # Deploy website, same as hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Tips-1"><a href="#Tips-1" class="headerlink" title="Tips"></a>Tips</h3><p>In personal use, changing and deploying repeatedly, entering commands one by one can be cumbersome (and you might even miss a step). So, you can create a sh script, and run it each time.</p><p>For example, inside the myFirstBlog folder, create a new Notepad document, enter</p><pre class="line-numbers language-none"><code class="language-none">bashCopy code#!&#x2F;bin&#x2F;bash# Stop script on any errorset -e# Clean the public directoryecho &quot;Cleaning...&quot;hexo clean# Generate static filesecho &quot;Generating...&quot;hexo generate# Deploy to the serverecho &quot;Deploying...&quot;hexo deployecho &quot;Deployment successful!&quot;echo &quot;Press enter to close&quot;read -r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Rename the file to deploy.sh, before deploying enter</p><pre class="line-numbers language-none"><code class="language-none">bashCopy code.&#x2F;deploy.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>And that should do it.</p><h2 id="Step-Wait-a-Bit-Longer-Optional-1"><a href="#Step-Wait-a-Bit-Longer-Optional-1" class="headerlink" title="Step ?: Wait a Bit Longer (Optional)"></a>Step ?: Wait a Bit Longer (Optional)</h2><p>Perhaps some friends are very excited to open the webpage and admire it. Then, they find the webpage design so monotonous, secretly cursing: “This is cheating, cheap goods are not good.” I sneezed twice in front of the screen and said, hold on, again.</p><p>Of course, that’s not the case. The real fun part is coming. There are so many people in the world who contribute out of passion, leading to a wide variety of themes available for Hexo to choose from.</p><p>Here at <a href="https://hexo.io/themes/index.html">Hexo Themes</a> you can pick a theme to your liking, from simple styles to elaborate designs. Currently, <a href="https://theme-next.js.org/docs/">NexT</a> is popular for its simplicity and extensive customization plugins. Here, we’ll choose <a href="https://github.com/blinkfox/hexo-theme-matery?tab=readme-ov-file">hexo-theme-matery</a>, a very beautiful theme. Again, thanks to the open-source heroes, and thank you <a href="https://github.com/blinkfox">Blinkfox</a>.</p><p>After choosing a theme, download the source files (git clone) and copy the downloaded files to the <strong>themes</strong> folder under myFirstBlog.</p><p>Similarly, in the _config.yml configuration file, change the theme to the name of the folder you just downloaded, for example,</p><pre class="line-numbers language-none"><code class="language-none"># Extensions## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;theme: hexo-theme-matery<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Publish again, and you can see the webpage theme has become fancier. Usually, each theme has its own detailed documentation.</p><h2 id="Conclusion-of-This-Article"><a href="#Conclusion-of-This-Article" class="headerlink" title="Conclusion of This Article"></a>Conclusion of This Article</h2><p>Exploring an unknown thing is joyful, and there is immense pleasure in the heart when succeeding after repeated trials and errors.</p><p>Thank you for reading my first article, please be forgiving, and suggestions are welcome!</p><p>In the next article, we will talk about some additional settings I have for the matery theme.</p>]]></content>
      
      
      <categories>
          
          <category> Personal Website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
