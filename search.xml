<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo基础进阶设置，2024版</title>
      <link href="/en/2024/03/06/2_2024-03-06-Hexo%E8%AE%BE%E7%BD%AE/"/>
      <url>/en/2024/03/06/2_2024-03-06-Hexo%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p> 在上篇我们搭建了一个很基础的网站，这次来看看我个人有哪些在2024年要做的配置吧。</p><p>事实上，在<a href="https://github.com/blinkfox/hexo-theme-matery">原文档</a>，以及博主<a href="https://marmalade.vip/about">lijunliang</a>的文章里已经有了非常详细的说明，想必也比我这个门外汉再写一份来的更清晰易懂。</p><p>但是这些文章也许有些年头了，有些地方在2024年可能需要额外的配置，这篇文章会简单介绍我做的改动。</p><h2 id="1，代码块highlight"><a href="#1，代码块highlight" class="headerlink" title="1，代码块highlight"></a>1，代码块highlight</h2><p>在原文说明highlight代码块的地方，原文如下</p><blockquote><p>Starting from <strong>Hexo 5.0.0 version</strong>, it comes with support for <code>prismjs</code> code syntax highlighting, and hexo-theme-matery has been modified to support it.</p><p>If the plugin of <code>hexo-prism-plugin</code> has been installed in your blog, then you need to execute <code>npm uninstall hexo-prism-plugin</code> to uninstall it, otherwise there will be <code>&#123;</code>, <code>&#125;</code> escape characters in the code block of the post.</p><p>Then, modify the value of <code>highlight.enable</code> to <code>false</code> in <code>_config.yml</code> at the root your hexo project, and set the value of <code>prismjs.enable</code> to <code>true</code>, the main configuration is as follows:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">></span>highlight<span class="token punctuation">:</span> <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span> <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">></span>prismjs<span class="token punctuation">:</span> <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>然而实际情况是，在2024年Hexo已经到了7+版本（cmd 输入<code>hexo -v</code>查看版本）。在官方文档中，新增了<code>syntax_highlighter: highlight.js</code>配置，所以在此基础上，需要将根目录的_config.yml文件highlight处更改为：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">syntax_highlighter</span><span class="token punctuation">:</span> prismjs <span class="token comment">#声明prismjs来启用</span><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前后效果如下：</p><p><img src="/en/../images/2/1_highlightcompare.png"></p><p><img src="/en/../images/2/1_highlightcompareafter.png"></p><h2 id="2-代码压缩"><a href="#2-代码压缩" class="headerlink" title="2, 代码压缩"></a>2, 代码压缩</h2><p>在<a href="https://marmalade.vip/Materysettings2.html">此文章</a>里，作者使用Gulp实现了代码和图片的压缩从而提升网站速度。但是早在2022年后，有一些commonJS的package完全移到了ESM里。例如原commonJS里的<code>del</code> v7.0.0，不在同时支持commonJS和ESM，而仅支持ESM，<a href="https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c">原文</a>如下：</p><blockquote><p>The package that linked you here is now pure <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">ESM</a>. It cannot be <code>require()</code>‘d from CommonJS.</p></blockquote><p>对于这些ESM的包，需要使用import()而不是require()。</p><p>因此，需要在原教程基础下，做额外几步：</p><h3 id="2-1，-安装esm"><a href="#2-1，-安装esm" class="headerlink" title="2.1， 安装esm"></a>2.1， 安装esm</h3> <pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">npm install gulp -g #安装gulp# 安装功能模块 npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save # 额外的功能模块 npm install gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del --savenpm i --save-dev esm -g #新增，安装esm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并将文件名<code>gulpfile.js</code>更改为<code>gulpfile.mjs</code></p><h3 id="2-2，-将require-变更为import"><a href="#2-2，-将require-变更为import" class="headerlink" title="2.2， 将require()变更为import()"></a>2.2， 将require()变更为import()</h3><p>在gulpfile.js最开头，将所有require的地方改为<code>import xxx from &#39;gulp-xxx&#39;</code></p><p>更改前</p><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">></span><span class="token keyword">var</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">></span><span class="token keyword">var</span> debug <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-debug"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">></span><span class="token keyword">var</span> cleancss <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-clean-css"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//css压缩组件 </span><span class="token operator">></span><span class="token keyword">var</span> uglify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-uglify"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//js压缩组件 </span><span class="token operator">></span><span class="token keyword">var</span> htmlmin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-htmlmin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//html压缩组件 </span><span class="token operator">></span><span class="token keyword">var</span> htmlclean <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-htmlclean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//html清理组件 </span><span class="token operator">></span><span class="token keyword">var</span> imagemin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-imagemin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//图片压缩组件 </span><span class="token operator">></span><span class="token keyword">var</span> changed <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-changed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//文件更改校验组件 </span><span class="token operator">></span><span class="token keyword">var</span> gulpif <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-if"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//任务 帮助调用组件 </span><span class="token operator">></span><span class="token keyword">var</span> plumber <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-plumber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//容错组件（发生错误不跳出任务，并报出错误内容） </span><span class="token operator">></span><span class="token keyword">var</span> isScriptAll <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件) </span><span class="token operator">></span><span class="token keyword">var</span> isDebug <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//是否调试显示 编译通过的文件 </span><span class="token operator">></span><span class="token keyword">var</span> gulpBabel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-babel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">></span><span class="token keyword">var</span> es2015Preset <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"babel-preset-es2015"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">></span><span class="token keyword">var</span> del <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"del"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">></span><span class="token keyword">var</span> Hexo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"hexo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span>来源<span class="token operator">:</span> Marmalade's Blog<span class="token operator">></span>文章作者<span class="token operator">:</span> lijunliang<span class="token operator">></span>文章链接<span class="token operator">:</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>marmalade<span class="token punctuation">.</span>vip<span class="token operator">/</span>Materysettings2<span class="token punctuation">.</span>html<span class="token operator">></span>本文章著作权归作者所有，任何形式的转载都请注明出处。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>更改后</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs">import gulp from 'gulp';import debug from 'gulp-debug';import cleancss from 'gulp-clean-css';import uglify from 'gulp-uglify';import htmlmin from 'gulp-htmlmin';import htmlclean from 'gulp-htmlclean';import imagemin from 'gulp-imagemin';import changed from 'gulp-changed';import gulpif from 'gulp-if';import plumber from 'gulp-plumber';import gulpBabel from 'gulp-babel';import es2015Preset from 'babel-preset-es2015';import &#123; deleteAsync &#125; from 'del';import Hexo from 'hexo';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其余部分保持不变。</p><h3 id="2-3，部署前启动Gulp压缩"><a href="#2-3，部署前启动Gulp压缩" class="headerlink" title="2.3，部署前启动Gulp压缩"></a>2.3，部署前启动Gulp压缩</h3><p>原先部署网页到github的步骤为</p><blockquote><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p>现在为</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hexo cleanhexo ggulp #启动Gulp压缩,控制台可查看错误信息hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3，-中英文个人网页"><a href="#3，-中英文个人网页" class="headerlink" title="3， 中英文个人网页"></a>3， 中英文个人网页</h2><p>这个需求到现在没有一个通解。在hexo提供了一种叫<a href="https://hexo.io/docs/internationalization.html">Internationalization (i18n)</a>的解决方案，其本质就是在source文件里分别创建两个语言的文件夹，然后再把文章放入相应的文件夹中。然而，但实际操作起来的过程中，尤其在应用预设theme的时候，会遇上种种困难。有些主题，例如在<a href="https://github.com/next-theme/hexo-theme-next">NexT</a>里已经适配好了语言转换的功能。不幸的是，本文用的<a href="https://github.com/blinkfox/hexo-theme-matery">matery</a>似乎没有这个功能。当然，大神们可以通过魔改实现功能。但是有没有更简单更傻瓜的办法呢？</p><h3 id="3-1，-初步设想"><a href="#3-1，-初步设想" class="headerlink" title="3.1， 初步设想"></a>3.1， 初步设想</h3><p>那必须是有的，其实我们想要的无外乎就是一<strong>套</strong>不同的界面，那么是不是可以理解为，主界面就是中文，然后在网址加上一个例如<code>/en</code>的后缀，转跳到英文界面。</p><p>换句话说，我们直接建立两个仓库，实现两个网址间的相互转跳就好了。</p><p>很幸运，github的个人网址里，虽然只能一个账户只能有一个免费用户页面（user site），但是页面却可以有很多个项目页面（project site）。</p><blockquote><p>例如，<a href="https://zcpisme.github.io/%E6%98%AF%E6%88%91%E7%9A%84%E7%94%A8%E6%88%B7%E9%A1%B5%E9%9D%A2%EF%BC%8C">https://zcpisme.github.io/是我的用户页面，</a> 而我有一个项目叫myProject，这个项目的网址就是<a href="https://zcpisme.github.io/myProject">https://zcpisme.github.io/myProject</a></p></blockquote><h3 id="3-2，-第二个仓库"><a href="#3-2，-第二个仓库" class="headerlink" title="3.2， 第二个仓库"></a>3.2， 第二个仓库</h3><p>这就简单了，我们把中文网址的项目文件夹复制一份，重新命名（随意命名，但方便起见我会直接叫myFirstBlog.en）。</p><p>在github上新建一个repository，名为en。结果如下：</p><p><img src="/en/../images/2/2_enGit.png"></p><h3 id="3-3-1，-更改myFirstBlog-en文件夹下配置文件"><a href="#3-3-1，-更改myFirstBlog-en文件夹下配置文件" class="headerlink" title="3.3.1， 更改myFirstBlog.en文件夹下配置文件"></a>3.3.1， 更改myFirstBlog.en文件夹下配置文件</h3><p>根目录下的_config.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Site</span><span class="token key atrule">title</span><span class="token punctuation">:</span> Hexo<span class="token key atrule">subtitle</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token key atrule">language</span><span class="token punctuation">:</span> en <span class="token comment">#改为en</span><span class="token comment"># URL</span><span class="token comment">## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'</span><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//zcpisme.github.io/en/  <span class="token comment">#在原基础上加上en</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Deployment</span><span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/zcpisme/en.git <span class="token comment">#en网页仓库地址</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> gh<span class="token punctuation">-</span>pages <span class="token comment">#推送到gh-pages</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>theme文件里的_config.yml，加一个按钮超链接到中文页面</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle  <span class="token comment">#粗暴的加一个中文按钮</span>  <span class="token key atrule">中文</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//zcpisme.github.io/  <span class="token comment">#直接转跳到中文站</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>language<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-2，-更改myFirstBlog文件夹下配置文件"><a href="#3-3-2，-更改myFirstBlog文件夹下配置文件" class="headerlink" title="3.3.2， 更改myFirstBlog文件夹下配置文件"></a>3.3.2， 更改myFirstBlog文件夹下配置文件</h3><p>根目录下的_config.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Site</span><span class="token key atrule">title</span><span class="token punctuation">:</span> Hexo<span class="token key atrule">subtitle</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN <span class="token comment">#改为中文</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>同理，我们只需要在theme里的_config.yml加一个按钮到英文站就好了</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle  <span class="token comment">#粗暴的加一个中文按钮</span>  <span class="token key atrule">English</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /en  <span class="token comment">#可以完整的写上https://zcpisme.github.io/en</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>language<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4，-效果"><a href="#3-4，-效果" class="headerlink" title="3.4， 效果"></a>3.4， 效果</h3><p>分别上传的两个仓库，等待片刻，便可以查看网址，效果如下：</p><p>中文站：</p><p><img src="/en/../images/2/3_ch.png"></p><p>英文站：</p><p><img src="/en/../images/2/3_en.png"></p><h3 id="3-5-，缺点"><a href="#3-5-，缺点" class="headerlink" title="3.5 ，缺点"></a>3.5 ，缺点</h3><p>缺点是显而易见的，</p><ul><li><p>两个仓库需要分别维护，这太麻烦了。</p></li><li><p>文章内容需要单独准备，因为这只是翻译了主界面，文章内容依旧需要自行翻译上传。</p></li><li><p>部分代码依旧需要改动，以适配英文页面。例如<img src="/en/../images/2/3_enflaw.png" alt="英文页面下部分并不是英文"></p></li><li><p>……</p></li></ul><h2 id="4，小总结一下"><a href="#4，小总结一下" class="headerlink" title="4，小总结一下"></a>4，小总结一下</h2><p>这里处理了一些原文档已经过时的教程，也简单说了一下我个人对于语言切换的一些想法，如果有更好的办法请务必告知我！很想学习捏</p>]]></content>
      
      
      <categories>
          
          <category> Personal Website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Github个人网页制作</title>
      <link href="/en/2024/03/04/1_2024-03-03-Hexo-+-Github%E4%B8%AA%E4%BA%BA%E7%BD%91%E9%A1%B5%E5%88%B6%E4%BD%9C/"/>
      <url>/en/2024/03/04/1_2024-03-03-Hexo-+-Github%E4%B8%AA%E4%BA%BA%E7%BD%91%E9%A1%B5%E5%88%B6%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p> 作为第一篇文章，就讲讲这个网站是怎么做的吧。 很早就有想做一个个人网站了，但是无奈不会的太多也就打消了这个念头。不然还得从头学一些奇奇怪怪的JavaScript和CSS相关的东西，这对我来说可就太折磨了。但是，昨天聊天时朋友提了一嘴：“你们没有个人作品集之类的东西吗？”， 我说还真没有，但是又突然想到了个人网站这种东西。想起本科时那些教授都有自己的网站，我就又去搜索了一下类似于“个人网站制作”的内容。 没想到居然有现成的库可以直接用，那就是Hexo了，甚至还配有各种主题（theme）。时过境迁，现在一切都变得那么容易，都可以一键生成。</p><p> 跟我说，谢谢你，开源侠。</p><h2 id="第一步：配置Github"><a href="#第一步：配置Github" class="headerlink" title="第一步：配置Github"></a>第一步：配置Github</h2><p>使用Github的原因很简单，对于个人用户它提供一个免费的user page，完全可以当个人网页用。</p><h3 id="注册Github"><a href="#注册Github" class="headerlink" title="注册Github"></a>注册Github</h3><p>此步略过</p><h3 id="本地生成id-rsa和id-rsa-pub"><a href="#本地生成id-rsa和id-rsa-pub" class="headerlink" title="本地生成id_rsa和id_rsa.pub"></a>本地生成id_rsa和id_rsa.pub</h3><p>打开一个CMD终端（或者windows下推荐使用Powershell），依次输入</p><pre class="line-numbers language-none"><code class="language-none">git config --global user.name &quot;Github用户名&quot;git config --global user.email &quot;Github邮箱&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa -C &quot;Github邮箱&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如，我的github用户名是 <strong>zcpisme</strong>, 用 <strong><a href="mailto:&#x7a;&#99;&#112;&#x69;&#115;&#109;&#x65;&#x40;&#117;&#x63;&#x68;&#x69;&#99;&#x61;&#103;&#x6f;&#x2e;&#101;&#100;&#x75;">&#x7a;&#99;&#112;&#x69;&#115;&#109;&#x65;&#x40;&#117;&#x63;&#x68;&#x69;&#99;&#x61;&#103;&#x6f;&#x2e;&#101;&#100;&#x75;</a></strong>（我编的一个邮箱），则在CMD输入</p><pre class="line-numbers language-none"><code class="language-none">git config --global user.name &quot;zcpisme&quot;git config --global user.email &quot;zcpisme@uchicago.edu&quot;ssh-keygen -t rsa -C &quot; zcpisme@uchicago.edu&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>按回车，如遇到y&#x2F;n，输入y回车</p><p>结果如图</p><p><img src="/en/../images/1/1_rsakey.png"></p><p>将生成的id_rsa.pub用记事本打开复制内容（在我电脑里的位置是C:\Users\12427.ssh）</p><p><img src="/en/../images/1/1_rsakey2.png"></p><h3 id="链接Github账号"><a href="#链接Github账号" class="headerlink" title="链接Github账号"></a>链接Github账号</h3><p><img src="/en/../images/1/1_gitrsa.png"></p><p>github账号 —&gt; Settings —&gt;SSH and GPG keys — new SSH key</p><p><img src="/en/../images/1/1_gitrsa2.png"></p><p><img src="/en/../images/1/1_gitrsa3.png"></p><p>title任意（建议你的邮箱），key粘贴刚才复制的id_rsa.pub里的内容。</p><p>自此，Github连接完成。</p><h3 id="新建一个名为username-github-io的repository"><a href="#新建一个名为username-github-io的repository" class="headerlink" title="新建一个名为username.github.io的repository"></a>新建一个名为username.github.io的repository</h3><p>在右上角的加号处，点击New repository</p><p><img src="/en/../images/1/1_gitio.png"></p><p>repository name 输入 “你的用户名.github.io” <strong>!!! 重要，一定是你的username.github.io，且一人只能存在一个这样的repository，且设为public</strong>， 点击下方create repository</p><p><img src="/en/../images/1/1_gitio2.png"></p><p>自此，github配置完成</p><h2 id="第一点五步：拥有node-js"><a href="#第一点五步：拥有node-js" class="headerlink" title="第一点五步：拥有node.js"></a>第一点五步：拥有node.js</h2><p>有人要骂了，说哎呀zcp怎么这么啰嗦，这还有个一点五步，还不好好打1.5。我说停停，我的目的是手把手教学，我也怕我以后忘了从头开始整理网上的教程，所以还是啰嗦点好。但对于这部分也只是告诉大家要有这么一部分，并不会在这里细讲。</p><p>node.js是一个JavaScript运行环境，我们之后的配置离不开这玩意。</p><p>安装教程参考：</p><p><a href="https://nodejs.org/en">https://nodejs.org/en</a></p><p><a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">https://www.runoob.com/nodejs/nodejs-install-setup.html</a></p><p>其实就把msi镜像文件下载安装就好了。</p><p>安装成功后，可在cmd输入查看安装是否成功</p><pre class="line-numbers language-none"><code class="language-none">npm -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/en/../images/1/1_nodejs.png"></p><h2 id="第二步：第一个Hexo个人网页"><a href="#第二步：第一个Hexo个人网页" class="headerlink" title="第二步：第一个Hexo个人网页"></a>第二步：第一个Hexo个人网页</h2><p>来力！有了以上的配置，接下来的一切都变得傻瓜了起来，既不用自己手搓网页，也不需要什么编程知识。</p><p>在上半步之后，我们可以用 <strong>npm</strong> 来管理node.js里的安装包。</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>输入以下指令即可，</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h3><p>例如我想在D:\desktop\campus\personalBlog下， 创建一个文件夹叫myFirstBlog用来管理我的网页，在cmd里进入此文件夹：</p><p><img src="/en/../images/1/1_enterfolder.png"></p><p>输入</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">hexo init myFirstBlog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到</p><p><img src="/en/../images/1/1_enterfolder2.png"></p><p>myFirstBlog已被创建。</p><h3 id="打开个人网页"><a href="#打开个人网页" class="headerlink" title="打开个人网页"></a>打开个人网页</h3><p>在刚才创建的文件夹里，启动服务</p><pre class="line-numbers language-none"><code class="language-none">hexo -s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/en/../images/1/1_starthexo.png"></p><p>也可以如图 hexo -s -p 4001来指定端口用来调试多个网址（默认端口为4000）。</p><p>复制 <a href="http://localhost:4000/%E5%88%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%EF%BC%8C%E5%8D%B3%E5%8F%AF%EF%BC%88%E6%9C%AC%E5%9C%B0%EF%BC%89%E9%A2%84%E8%A7%88%E3%80%82">http://localhost:4000/到浏览器中，即可（本地）预览。</a></p><p><strong>于是，恭喜！你有了自己的网页！</strong><img src="/en/../images/1/1_starthexo2.png"></p><h2 id="第三步：-稍微等一下（发布到Github）"><a href="#第三步：-稍微等一下（发布到Github）" class="headerlink" title="第三步： 稍微等一下（发布到Github）"></a>第三步： 稍微等一下（发布到Github）</h2><p>当然，我们不能仅限于本地预览，我们需要将我们的网页发到公网上，所有人都可以预览，于是要如下配置。</p><h3 id="config-yml配置文件"><a href="#config-yml配置文件" class="headerlink" title="_config.yml配置文件"></a>_config.yml配置文件</h3><p>在刚才的myFirstBlog文件夹下，有一个名为_config.yml的文件，用记事本打开。拉到最底下#Deployment处， type为git， repo更改为最开始repository的网址+.git，branch为master例如：</p><pre class="line-numbers language-none"><code class="language-none"># Deployment## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;one-command-deploymentdeploy:  type: git  repo: https:&#x2F;&#x2F;github.com&#x2F;zcpisme&#x2F;zcpisme.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>最后一步了，在cmd中（依旧进入到myFirstBlog文件夹里），输入</p><pre class="line-numbers language-none"><code class="language-none">hexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>即可等待文件上传至GitHub，几分钟后，username.github.io 就是你的个人网页了！</p><p><img src="/en/../images/1/1_gitiofinal.png"></p><p>是不是as ez as ABC~</p><h3 id="hexo常用指令"><a href="#hexo常用指令" class="headerlink" title="hexo常用指令"></a>hexo常用指令</h3><pre class="line-numbers language-none"><code class="language-none">hexo init [folder] #初始化hexohexo new [layout] &lt;title&gt; #新建新文章，所有文章需要为markdown（.md）格式，默认存在.&#x2F;source&#x2F;_post 文件夹下hexo generate #生成静态文件，同 hexo ghexo server #启动本地服务， 同hexo shexo deploy #部署网页， 同hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><p>在个人的使用中，一次次更改部署，一条条指令输入过于繁琐（甚至会漏掉某一条），所以可以创建一个sh脚本，每次跑一遍就好了。</p><p>例如，在myFirstBlog文件夹里，新建记事本，输入</p><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;bin&#x2F;bash# Stop script on any errorset -e# Navigate to the Hexo project directory (if not already there)# Clean the public directoryecho &quot;Cleaning...&quot;hexo clean# Generate static filesecho &quot;Generating...&quot;hexo generate# Deploy to the serverecho &quot;Deploying...&quot;hexo deployecho &quot;Deployment successful!&quot;echo &quot;Press enter to close&quot;read -r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更改文件名为deploy.sh， 在每次部署前输入</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;deploy.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可</p><h2 id="第？步：稍微等两下（可选）"><a href="#第？步：稍微等两下（可选）" class="headerlink" title="第？步：稍微等两下（可选）"></a>第？步：稍微等两下（可选）</h2><p>想必有朋友非常之激动的打开了网页，一顿欣赏。而后发现网页设计是如此的单调，心中暗骂：”这不坑人吗，果然便宜没好货。” zcp在屏幕前打了两个喷嚏，再说了一次停停。</p><p>当然不是，真正精彩的地方来了，世界上用爱发电的人如此多，以至于hexo也拥有种类繁多的主题可供挑选。</p><p>此处<a href="https://hexo.io/themes/index.html">Hexo主题</a> 可以挑选心仪的主题，从简朴风到二刺螈应有尽有。目前，网上<a href="https://theme-next.js.org/docs/">NexT</a>主打一个简朴以及有极多的插件可自定义。这里，我们选用<a href="https://github.com/blinkfox/hexo-theme-matery?tab=readme-ov-file">hexo-theme-matery</a>， 一个非常漂亮的主题，再一次，感谢开源侠，感谢<a href="https://github.com/blinkfox">闪烁之狐 (blinkfox)</a>。</p><p>选好主题后，下载源文件（git clone），将下载的文件拷贝至myFirstBlog下的<strong>themes</strong>文件夹。</p><p>同样，在_config.yml配置文件里，更改 theme为刚才下载的文件夹名，例如</p><pre class="line-numbers language-none"><code class="language-none"># Extensions## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;theme: hexo-theme-matery<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>再次发布，可以看到网页主题变得奢华了起来。通常，每个主题有自己详细的文档。</p><h2 id="本篇结尾"><a href="#本篇结尾" class="headerlink" title="本篇结尾"></a>本篇结尾</h2><p>自己探索一个未知的事物是快乐的，并且在一次次试错最后成功时，内心是极其愉悦的。</p><p>感谢阅读我的第一篇文章，请多包涵，并欢迎提出建议！</p><p>下一篇我们来谈谈我对matery这个主题的一些额外设置。</p>]]></content>
      
      
      <categories>
          
          <category> Personal Website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
